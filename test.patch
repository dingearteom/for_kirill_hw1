diff --git a/.github/workflows/c-cpp.yml b/.github/workflows/c-cpp.yml
new file mode 100644
index 0000000..6231a8d
--- /dev/null
+++ b/.github/workflows/c-cpp.yml
@@ -0,0 +1,106 @@
+name: C/C++ CI
+
+on:
+  pull_request:
+    branches: [ master ]
+
+jobs:
+  asan:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run asan.sh
+      run: |
+         chmod +x ./.test/asan.sh
+         ./.test/asan.sh
+      shell: bash
+  compile_test_gcc:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run compile_test_gcc.sh
+      run: |
+         chmod +x ./.test/compile_test_gcc.sh
+         ./.test/compile_test_gcc.sh
+      shell: bash
+  compile_test_clang:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run compile_test_clang.sh
+      run: |
+         chmod +x ./.test/compile_test_clang.sh
+         ./.test/compile_test_clang.sh
+      shell: bash
+  empty_input:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run empty_input.sh
+      run: |
+         chmod +x ./.test/empty_input.sh
+         ./.test/empty_input.sh
+      shell: bash
+  even:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run even.sh
+      run: |
+         chmod +x ./.test/even.sh
+         ./.test/even.sh
+      shell: bash
+  invalid_input:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run invalid_input.sh
+      run: |
+         chmod +x ./.test/invalid_input.sh
+         ./.test/invalid_input.sh
+      shell: bash
+  odd:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run odd.sh
+      run: |
+         chmod +x ./.test/odd.sh
+         ./.test/odd.sh
+      shell: bash
+  random:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run random.sh
+      run: |
+         chmod +x ./.test/random.sh
+         ./.test/random.sh
+      shell: bash
+  single_value:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run single_value.sh
+      run: |
+         chmod +x ./.test/single_value.sh
+         ./.test/single_value.sh
+      shell: bash
+  test:
+    runs-on: ubuntu-latest
+    timeout-minutes: 10
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run test.sh
+      run: |
+         chmod +x ./.test/test.sh
+         ./.test/test.sh
+      shell: bash
+  two_values:
+    runs-on: ubuntu-latest
+    timeout-minutes: 1
+    steps:
+    - uses: actions/checkout@v2
+    - name: Run two_values.sh
+      run: |
+         chmod +x ./.test/two_values.sh
+         ./.test/two_values.sh
+      shell: bash
diff --git a/.test/4200.txt b/.test/4200.txt
new file mode 100644
index 0000000..8b3c6d2
--- /dev/null
+++ b/.test/4200.txt
@@ -0,0 +1,2 @@

+
diff --git a/.test/Makefile.asan b/.test/Makefile.asan
new file mode 100644
index 0000000..d2e8e80
--- /dev/null
+++ b/.test/Makefile.asan
@@ -0,0 +1,5 @@
+all:
+	$(CXX) *.cpp -std=c++17 -g -O3 -Wall -Wextra -pthread -pedantic -fsanitize=address -o posix
+
+clean:
+	rm -f posix
diff --git a/.test/Makefile.hard b/.test/Makefile.hard
new file mode 100644
index 0000000..119acd7
--- /dev/null
+++ b/.test/Makefile.hard
@@ -0,0 +1,5 @@
+all:
+	$(CXX) *.cpp -std=c++17 -g -O3 -Werror -Wall -Wextra -pthread -pedantic -o posix
+
+clean:
+	rm -f posix
diff --git a/.test/Makefile.soft b/.test/Makefile.soft
new file mode 100644
index 0000000..0755b9c
--- /dev/null
+++ b/.test/Makefile.soft
@@ -0,0 +1,5 @@
+all:
+	$(CXX) *.cpp -g -std=c++17 -O3 -Wall -Wextra -pthread -pedantic -o posix
+
+clean:
+	rm -f posix
diff --git a/.test/asan.sh b/.test/asan.sh
new file mode 100644
index 0000000..1549ab0
--- /dev/null
+++ b/.test/asan.sh
@@ -0,0 +1,38 @@
+#!/bin/bash
+
+set -e
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.asan Makefile
+echo "Step 1. Build"
+make
+
+VALUES="$((( RANDOM )))"
+for i in {1..100}; do
+    VALUES+=" $((( RANDOM )))"
+done
+
+SUM=$(echo "$VALUES" | sed 's/ /+/g' | bc)
+
+echo "Step 2. Run test"
+echo "echo '${VALUES}' > in.txt && timeout 30s ./posix 5 1000"
+
+echo "${VALUES}" > "in.txt"
+OUT=$(timeout 30s ./posix 5 1000)
+RC=$?
+
+git reset --hard HEAD
+git clean -f
+
+if [[ ${RC} != 0 ]]; then
+    echo "FAIL! Return code: ${RC}"
+    echo 1
+fi
+
+if (( ${OUT} == ${SUM} )); then
+    echo "OK"
+    exit 0
+else
+    echo "FAIL! Out must be ${SUM} but return ${OUT}"
+    exit 1
+fi
diff --git a/.test/compile_test_clang.sh b/.test/compile_test_clang.sh
new file mode 100644
index 0000000..d8ab17f
--- /dev/null
+++ b/.test/compile_test_clang.sh
@@ -0,0 +1,18 @@
+#!/bin/bash
+
+set -e
+
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.hard Makefile
+if make; then
+    echo "OK"
+    git reset --hard HEAD
+    git clean -f
+    exit 0
+else
+    echo "FAIL"
+    git reset --hard HEAD
+    git clean -f
+    exit 1
+fi
diff --git a/.test/compile_test_gcc.sh b/.test/compile_test_gcc.sh
new file mode 100644
index 0000000..dacd34c
--- /dev/null
+++ b/.test/compile_test_gcc.sh
@@ -0,0 +1,18 @@
+#!/bin/bash
+
+set -e
+
+CC=gcc
+CXX=g++
+cp ./.test/Makefile.hard Makefile
+if make; then
+    echo "OK"
+    git reset --hard HEAD
+    git clean -f
+    exit 0
+else
+    echo "FAIL"
+    git reset --hard HEAD
+    git clean -f
+    exit 1
+fi
diff --git a/.test/empty_input.sh b/.test/empty_input.sh
new file mode 100644
index 0000000..376ee01
--- /dev/null
+++ b/.test/empty_input.sh
@@ -0,0 +1,33 @@
+#!/bin/bash
+set -e
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.soft Makefile
+echo "Step 1. Build"
+make
+
+echo "Step 2. Run test"
+echo "echo '' > in.txt && timeout 10s ./posix 10 10"
+
+rm -f "in.txt"
+echo '' > "in.txt"
+OUT=$(timeout 10s ./posix 10 10)
+RC=$?
+
+rm -f "in.txt"
+
+git reset --hard HEAD
+git clean -f
+
+if [[ ${RC} != 0 ]]; then
+    echo "FAIL! Return code: ${RC}"
+    echo 1
+fi
+
+if (( ${OUT} == 0 )); then
+    echo "OK"
+    exit 0
+else
+    echo "FAIL! Out must be 0 but return ${OUT}"
+    exit 1
+fi
diff --git a/.test/even.sh b/.test/even.sh
new file mode 100644
index 0000000..2d70027
--- /dev/null
+++ b/.test/even.sh
@@ -0,0 +1,31 @@
+#!/bin/bash
+
+set -e
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.soft Makefile
+echo "Step 1. Build"
+make
+
+echo "Step 2. Run test"
+echo "echo '2 1 3 5 4 6 7 8 10 9' > in.txt | timeout 10s ./posix 7 9"
+
+echo '2 1 3 5 4 6 7 8 10 9' > "in.txt"
+OUT=$(timeout 10s ./posix 7 9)
+RC=$?
+
+git reset --hard HEAD
+git clean -f
+
+if [[ ${RC} != 0 ]]; then
+    echo "FAIL! Return code: ${RC}"
+    echo 1
+fi
+
+if (( ${OUT} == 55 )); then
+    echo "OK"
+    exit 0
+else
+    echo "FAIL! Out must be 55 but return ${OUT}"
+    exit 1
+fi
diff --git a/.test/invalid_input.sh b/.test/invalid_input.sh
new file mode 100644
index 0000000..92079c8
--- /dev/null
+++ b/.test/invalid_input.sh
@@ -0,0 +1,27 @@
+#!/bin/bash
+
+set -e
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.soft Makefile
+echo "Step 1. Build"
+make
+set +e
+
+echo "Step 2. Run test"
+echo "echo '1' > in.txt && timeout 10s ./posix"
+
+echo '1' > "in.txt"
+RES=$(timeout 10s ./posix)
+RC=$?
+
+git reset --hard HEAD
+git clean -f
+
+if [[ ${RC} == 0 ]]; then
+    echo "FAIL! Return code: 0"
+    exit 1
+else
+    echo "OK"
+    exit 0
+fi
diff --git a/.test/odd.sh b/.test/odd.sh
new file mode 100644
index 0000000..aecdec6
--- /dev/null
+++ b/.test/odd.sh
@@ -0,0 +1,31 @@
+#!/bin/bash
+
+set -e
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.soft Makefile
+echo "Step 1. Build"
+make
+
+echo "Step 2. Run test"
+echo "echo '2 1 3 5 4 6 7 8 9' > in.txt && timeout 10s ./posix 2 15"
+
+echo '2 1 3 5 4 6 7 8 9' > "in.txt"
+OUT=$(echo '2 1 3 5 4 6 7 8 9' | timeout 10s ./posix 2 15)
+RC=$?
+
+git reset --hard HEAD
+git clean -f
+
+if [[ ${RC} != 0 ]]; then
+    echo "FAIL! Return code: ${RC}"
+    echo 1
+fi
+
+if (( ${OUT} == 45 )); then
+    echo "OK"
+    exit 0
+else
+    echo "FAIL! Out must be 45 but return ${OUT}"
+    exit 1
+fi
diff --git a/.test/random.sh b/.test/random.sh
new file mode 100644
index 0000000..601575a
--- /dev/null
+++ b/.test/random.sh
@@ -0,0 +1,39 @@
+#!/bin/bash
+
+set -e
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.soft Makefile
+echo "Step 1. Build"
+make
+
+VALUES="$((( RANDOM )))"
+for i in {1..100}; do
+    VALUES+=" $((( RANDOM )))"
+done
+
+SUM=$(echo "$VALUES" | sed 's/ /+/g' | bc)
+
+echo "Step 2. Run test"
+echo "echo '${VALUES}' > in.txt && timeout 10s ./posix 3 150"
+
+echo "${VALUES}" > "in.txt"
+OUT=$(timeout 10s ./posix 3 150)
+
+RC=$?
+
+git reset --hard HEAD
+git clean -f
+
+if [[ ${RC} != 0 ]]; then
+    echo "FAIL! Return code: ${RC}"
+    echo 1
+fi
+
+if (( ${OUT} == ${SUM} )); then
+    echo "OK"
+    exit 0
+else
+    echo "FAIL! Out must be ${SUM} but return ${OUT}"
+    exit 1
+fi
diff --git a/.test/single_value.sh b/.test/single_value.sh
new file mode 100644
index 0000000..a697742
--- /dev/null
+++ b/.test/single_value.sh
@@ -0,0 +1,31 @@
+#!/bin/bash
+
+set -e
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.soft Makefile
+echo "Step 1. Build"
+make
+
+echo "Step 2. Run test"
+echo "echo '1' > in.txt && timeout 10s ./posix 1 5"
+
+echo '1' > "in.txt"
+OUT=$(timeout 10s ./posix 1 5)
+RC=$?
+
+git reset --hard HEAD
+git clean -f
+
+if [[ ${RC} != 0 ]]; then
+    echo "FAIL! Return code: ${RC}"
+    echo 1
+fi
+
+if (( ${OUT} == 1 )); then
+    echo "OK"
+    exit 0
+else
+    echo "FAIL! Out must be 1 but return ${OUT}"
+    exit 1
+fi
diff --git a/.test/test.sh b/.test/test.sh
new file mode 100644
index 0000000..d83c1a9
--- /dev/null
+++ b/.test/test.sh
@@ -0,0 +1,66 @@
+#!/bin/bash
+
+TEST_FILE="$(realpath -e ./.test/4200.txt)"
+
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.soft Makefile
+make
+
+RUN_COUNT=1
+EXPECTED_RESULT=4200
+CONSUMERS_THRESHOLD=100
+CONSUMERS_STEP=9
+SLEEP_THRESHOLD=0
+CYCLE_COUNT=100
+
+result="$(cat "${TEST_FILE}" | timeout 10s ./posix 1 2)"
+
+for ((cycle=0; cycle<=${CYCLE_COUNT};cycle+=1)); do
+  for ((consumers_amount=1; consumers_amount<=${CONSUMERS_THRESHOLD};consumers_amount+=${CONSUMERS_STEP})); do
+      echo "Running with parameters: consumers amount = $consumers_amount, sleep threshold = ${SLEEP_THRESHOLD}" > log.txt
+      cat "${TEST_FILE}" > "in.txt"
+      result="$(timeout 10s ./posix "$consumers_amount" ${SLEEP_THRESHOLD})"
+      status=$?
+      if [ $status -ne 0 ]; then
+          echo "test failed with wrong error code, got $status (consumers amount = $consumers_amount, sleep threshold = ${SLEEP_THRESHOLD})"
+          exit $status
+      fi
+
+      if ! [[ $result =~ ^[+-]?[0-9]+$ ]]; then
+          echo "Invalid output: ${result}"
+          exit 1
+      fi
+
+      if (( "$result" + 0 != "${EXPECTED_RESULT}" )); then
+          echo "test failed with wrong summ; expected ${EXPECTED_RESULT}, got ${result} (consumers amount = $consumers_amount, sleep threshold = ${SLEEP_THRESHOLD})"
+          exit 1
+      fi
+
+      echo '1' > "in.txt"
+      echo "Running small test with parameters: consumers amount = $consumers_amount, sleep threshold = ${SLEEP_THRESHOLD}" > log.txt
+      result=$(timeout 10s ./posix "$consumers_amount" ${SLEEP_THRESHOLD})
+      status=$?
+
+      if [ $status -ne 0 ]; then
+          echo "Small test failed with wrong error code, got $status (consumers amount = $consumers_amount, sleep threshold = ${SLEEP_THRESHOLD})"
+          exit $status
+      fi
+
+      if ! [[ $result =~ ^[+-]?[0-9]+$ ]]; then
+          echo "Invalid output: ${result}"
+          exit 1
+      fi
+
+      if [ "$result" -ne "1" ]; then
+          echo "Small test failed with wrong summ; expected ${EXPECTED_RESULT}, got ${result} (consumers amount = $consumers_amount, sleep threshold = ${SLEEP_THRESHOLD})"
+          exit 1
+      fi
+  done
+
+  echo "cycle number ${cycle} passed"
+done
+
+echo "all tests passed"
+
+
diff --git a/.test/two_values.sh b/.test/two_values.sh
new file mode 100644
index 0000000..e0a0299
--- /dev/null
+++ b/.test/two_values.sh
@@ -0,0 +1,32 @@
+#!/bin/bash
+
+set -e
+CC=clang
+CXX=clang++
+cp ./.test/Makefile.soft Makefile
+echo "Step 1. Build"
+make
+
+echo "Step 2. Run test"
+echo "echo '1 2' > in.txt && timeout 10s ./posix 2 0"
+
+echo '1 2' > "in.txt"
+OUT=$(timeout 10s ./posix 2 0)
+
+RC=$?
+
+git reset --hard HEAD
+git clean -f
+
+if [[ ${RC} != 0 ]]; then
+    echo "FAIL! Return code: ${RC}"
+    echo 1
+fi
+
+if (( ${OUT} == 3 )); then
+    echo "OK"
+    exit 0
+else
+    echo "FAIL! Out must be 3 but return ${OUT}"
+    exit 1
+fi
